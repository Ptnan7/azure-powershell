// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.8, generator: @autorest/powershell@4.0.748)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.FrontDoor.Models
{
    using System.Linq;

    /// <summary>
    /// Excludes whole requests from managed rule evaluation according to match
    /// conditions.
    /// </summary>
    public partial class ManagedRuleSetException
    {
        /// <summary>
        /// Initializes a new instance of the ManagedRuleSetException class.
        /// </summary>
        public ManagedRuleSetException()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedRuleSetException class.
        /// </summary>

        /// <param name="matchVariable">The variable to be evaluated for excluding the request.
        /// Possible values include: &#39;RequestUri&#39;, &#39;SocketAddr&#39;, &#39;RequestHeaderNames&#39;</param>

        /// <param name="selectorMatchOperator">Comparison operator to apply to the selector when specifying which elements
        /// in the collection this exception applies to.
        /// Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;,
        /// &#39;EqualsAny&#39;</param>

        /// <param name="selector">When matchVariable is a collection, operator used to specify which elements
        /// in the collection this exception applies to. Currently, the only
        /// matchVariable to support selector is &#39;RequestHeaderNames&#39;, and the selector
        /// value can be any HTTP request header, e.g &#39;User-Agent&#39;.
        /// </param>

        /// <param name="valueMatchOperator">Comparison operator to apply to the value to be matched.
        /// Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;,
        /// &#39;EqualsAny&#39;, &#39;IPMatch&#39;</param>

        /// <param name="matchValues">List of values to be matched with.
        /// </param>

        /// <param name="scopes">Scope(s) of the exception.
        /// </param>
        public ManagedRuleSetException(string matchVariable, string valueMatchOperator, System.Collections.Generic.IList<string> matchValues, string selectorMatchOperator = default(string), string selector = default(string), System.Collections.Generic.IList<ManagedRuleSetScope> scopes = default(System.Collections.Generic.IList<ManagedRuleSetScope>))

        {
            this.MatchVariable = matchVariable;
            this.SelectorMatchOperator = selectorMatchOperator;
            this.Selector = selector;
            this.ValueMatchOperator = valueMatchOperator;
            this.MatchValues = matchValues;
            this.Scopes = scopes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the variable to be evaluated for excluding the request. Possible values include: &#39;RequestUri&#39;, &#39;SocketAddr&#39;, &#39;RequestHeaderNames&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable {get; set; }

        /// <summary>
        /// Gets or sets comparison operator to apply to the selector when specifying
        /// which elements in the collection this exception applies to. Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;, &#39;EqualsAny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectorMatchOperator")]
        public string SelectorMatchOperator {get; set; }

        /// <summary>
        /// Gets or sets when matchVariable is a collection, operator used to specify
        /// which elements in the collection this exception applies to. Currently, the
        /// only matchVariable to support selector is &#39;RequestHeaderNames&#39;, and the
        /// selector value can be any HTTP request header, e.g &#39;User-Agent&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selector")]
        public string Selector {get; set; }

        /// <summary>
        /// Gets or sets comparison operator to apply to the value to be matched. Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;, &#39;EqualsAny&#39;, &#39;IPMatch&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "valueMatchOperator")]
        public string ValueMatchOperator {get; set; }

        /// <summary>
        /// Gets or sets list of values to be matched with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchValues")]
        public System.Collections.Generic.IList<string> MatchValues {get; set; }

        /// <summary>
        /// Gets or sets scope(s) of the exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scopes")]
        public System.Collections.Generic.IList<ManagedRuleSetScope> Scopes {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MatchVariable == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (this.ValueMatchOperator == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ValueMatchOperator");
            }
            if (this.MatchValues == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchValues");
            }





            if (this.Scopes != null)
            {
                foreach (var element in this.Scopes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}