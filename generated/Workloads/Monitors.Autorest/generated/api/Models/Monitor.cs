// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Extensions;

    /// <summary>SAP monitor info on Azure (ARM properties and SAP monitor properties)</summary>
    public partial class Monitor :
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitor,
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.TrackedResource();

        /// <summary>
        /// The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring
        /// region.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string AppLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).AppLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).AppLocation = value ?? null; }

        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string ErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorCode; }

        /// <summary>Error details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IErrorDetails> ErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorDetail; }

        /// <summary>Inner error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string ErrorInnerError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorInnerError; }

        /// <summary>Error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string ErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorMessage; }

        /// <summary>Error target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string ErrorTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorTarget; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentity _identity;

        /// <summary>[currently not in use] Managed service identity(user assigned identities)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.UserAssignedServiceIdentity()); set => this._identity = value; }

        /// <summary>Type of manage identity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>User assigned identities dictionary</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.FormatTable(Index = 3)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResourceInternal)__trackedResource).Location = value ?? null; }

        /// <summary>The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string LogAnalyticsWorkspaceArmId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).LogAnalyticsWorkspaceArmId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).LogAnalyticsWorkspaceArmId = value ?? null; }

        /// <summary>Managed resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.FormatTable(Index = 2)]
        public string ManagedResourceGroupConfigurationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ManagedResourceGroupConfigurationName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ManagedResourceGroupConfigurationName = value ?? null; }

        /// <summary>Internal Acessors for Error</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesErrors Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.Error { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).Error; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).Error = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ErrorCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorCode = value ?? null; }

        /// <summary>Internal Acessors for ErrorDetail</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IErrorDetails> Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ErrorDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorDetail = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for ErrorInnerError</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ErrorInnerError { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorInnerError; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorInnerError = value ?? null; }

        /// <summary>Internal Acessors for ErrorMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorMessage = value ?? null; }

        /// <summary>Internal Acessors for ErrorTarget</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ErrorTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ErrorTarget = value ?? null; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.UserAssignedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for ManagedResourceGroupConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IManagedRgConfiguration Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ManagedResourceGroupConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ManagedResourceGroupConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ManagedResourceGroupConfiguration = value ?? null /* model class */; }

        /// <summary>Internal Acessors for MsiArmId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.MsiArmId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).MsiArmId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).MsiArmId = value ?? null; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorProperties Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.MonitorProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for StorageAccountArmId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorInternal.StorageAccountArmId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).StorageAccountArmId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).StorageAccountArmId = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Id = value ?? null; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Name = value ?? null; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Type = value ?? null; }

        /// <summary>The ARM ID of the MSI used for SAP monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string MsiArmId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).MsiArmId; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.FormatTable(Index = 0)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorProperties _property;

        /// <summary>SAP monitor properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.MonitorProperties()); set => this._property = value; }

        /// <summary>State of provisioning of the SAP monitor.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.FormatTable(Index = 4)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.FormatTable(Index = 1)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string RoutingPreference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).RoutingPreference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).RoutingPreference = value ?? null; }

        /// <summary>The ARM ID of the Storage account used for SAP monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string StorageAccountArmId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).StorageAccountArmId; }

        /// <summary>The subnet which the SAP monitor will be deployed in</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string Subnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).MonitorSubnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).MonitorSubnet = value ?? null; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IResourceInternal)__trackedResource).Type; }

        /// <summary>
        /// Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created
        /// which do not support zone redundancy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Origin(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.DoNotFormat]
        public string ZoneRedundancyPreference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ZoneRedundancyPreference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesInternal)Property).ZoneRedundancyPreference = value ?? null; }

        /// <summary>Creates an new <see cref="Monitor" /> instance.</summary>
        public Monitor()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// SAP monitor info on Azure (ARM properties and SAP monitor properties)
    public partial interface IMonitor :
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResource
    {
        /// <summary>
        /// The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring
        /// region.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region.",
        SerializedName = @"appLocation",
        PossibleTypes = new [] { typeof(string) })]
        string AppLocation { get; set; }
        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error code.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorCode { get;  }
        /// <summary>Error details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error details.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IErrorDetails) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IErrorDetails> ErrorDetail { get;  }
        /// <summary>Inner error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Inner error message.",
        SerializedName = @"innerError",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorInnerError { get;  }
        /// <summary>Error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error message.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorMessage { get;  }
        /// <summary>Error target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error target.",
        SerializedName = @"target",
        PossibleTypes = new [] { typeof(string) })]
        string ErrorTarget { get;  }
        /// <summary>Type of manage identity</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of manage identity",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PSArgumentCompleterAttribute("None", "UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>User assigned identities dictionary</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User assigned identities dictionary",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.",
        SerializedName = @"logAnalyticsWorkspaceArmId",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticsWorkspaceArmId { get; set; }
        /// <summary>Managed resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Managed resource group name",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedResourceGroupConfigurationName { get; set; }
        /// <summary>The ARM ID of the MSI used for SAP monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ARM ID of the MSI used for SAP monitoring.",
        SerializedName = @"msiArmId",
        PossibleTypes = new [] { typeof(string) })]
        string MsiArmId { get;  }
        /// <summary>State of provisioning of the SAP monitor.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"State of provisioning of the SAP monitor.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PSArgumentCompleterAttribute("Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating")]
        string ProvisioningState { get;  }
        /// <summary>
        /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.",
        SerializedName = @"routingPreference",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PSArgumentCompleterAttribute("Default", "RouteAll")]
        string RoutingPreference { get; set; }
        /// <summary>The ARM ID of the Storage account used for SAP monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ARM ID of the Storage account used for SAP monitoring.",
        SerializedName = @"storageAccountArmId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountArmId { get;  }
        /// <summary>The subnet which the SAP monitor will be deployed in</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The subnet which the SAP monitor will be deployed in",
        SerializedName = @"monitorSubnet",
        PossibleTypes = new [] { typeof(string) })]
        string Subnet { get; set; }
        /// <summary>
        /// Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created
        /// which do not support zone redundancy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created which do not support zone redundancy.",
        SerializedName = @"zoneRedundancyPreference",
        PossibleTypes = new [] { typeof(string) })]
        string ZoneRedundancyPreference { get; set; }

    }
    /// SAP monitor info on Azure (ARM properties and SAP monitor properties)
    internal partial interface IMonitorInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.ITrackedResourceInternal
    {
        /// <summary>
        /// The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring
        /// region.
        /// </summary>
        string AppLocation { get; set; }
        /// <summary>Defines the SAP monitor errors.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorPropertiesErrors Error { get; set; }
        /// <summary>Error code.</summary>
        string ErrorCode { get; set; }
        /// <summary>Error details.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IErrorDetails> ErrorDetail { get; set; }
        /// <summary>Inner error message.</summary>
        string ErrorInnerError { get; set; }
        /// <summary>Error message.</summary>
        string ErrorMessage { get; set; }
        /// <summary>Error target.</summary>
        string ErrorTarget { get; set; }
        /// <summary>[currently not in use] Managed service identity(user assigned identities)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedServiceIdentity Identity { get; set; }
        /// <summary>Type of manage identity</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PSArgumentCompleterAttribute("None", "UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>User assigned identities dictionary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The ARM ID of the Log Analytics Workspace that is used for SAP monitoring.</summary>
        string LogAnalyticsWorkspaceArmId { get; set; }
        /// <summary>Managed resource group configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IManagedRgConfiguration ManagedResourceGroupConfiguration { get; set; }
        /// <summary>Managed resource group name</summary>
        string ManagedResourceGroupConfigurationName { get; set; }
        /// <summary>The ARM ID of the MSI used for SAP monitoring.</summary>
        string MsiArmId { get; set; }
        /// <summary>SAP monitor properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.Models.IMonitorProperties Property { get; set; }
        /// <summary>State of provisioning of the SAP monitor.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PSArgumentCompleterAttribute("Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Workloads.Monitors.PSArgumentCompleterAttribute("Default", "RouteAll")]
        string RoutingPreference { get; set; }
        /// <summary>The ARM ID of the Storage account used for SAP monitoring.</summary>
        string StorageAccountArmId { get; set; }
        /// <summary>The subnet which the SAP monitor will be deployed in</summary>
        string Subnet { get; set; }
        /// <summary>
        /// Sets the preference for zone redundancy on resources created for the SAP monitor. By default resources will be created
        /// which do not support zone redundancy.
        /// </summary>
        string ZoneRedundancyPreference { get; set; }

    }
}