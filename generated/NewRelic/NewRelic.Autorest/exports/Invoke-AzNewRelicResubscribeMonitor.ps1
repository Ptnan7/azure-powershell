
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Resubscribes the New Relic Organization of the underline Monitor Resource to be billed by Azure Marketplace
.Description
Resubscribes the New Relic Organization of the underline Monitor Resource to be billed by Azure Marketplace
.Example
Invoke-AzNewRelicResubscribeMonitor -MonitorName "test-01" -ResourceGroupName "ps-test" -OrganizationId "987654321" -PlanId "newrelicpaygtestplan3@123456789123456@PUBIDnewrelicinc1234567891234" -PublisherId "newrelicinc1234567891234" -OfferId "newrelic-pay-as-you-go"
.Example
$resubscribeProps = @{
    OrganizationId = "987654321"
    PlanId = "newrelicpaygtestplan3@123456789123456@PUBIDnewrelicinc1234567891234"
    PublisherId = "newrelicinc1234567891234"
    OfferId = "newrelic-pay-as-you-go"
    TermId = "hjdtn7tfq3ka3"
    ResourceGroup = "ps-test-new"
    SubscriptionId = "22222222-3333-4444-5555-666666666666"
}
Invoke-AzNewRelicResubscribeMonitor -MonitorName "test-01" -ResourceGroupName "ps-test" -Body $resubscribeProps

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicIdentity
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IResubscribeProperties
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicMonitorResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODY <IResubscribeProperties>: Resubscribe Properties
  [OfferId <String>]: Offer Id of the NewRelic offer that needs to be resubscribed
  [OrganizationId <String>]: Organization Id of the NewRelic Organization that needs to be resubscribed
  [PlanId <String>]: Newly selected plan Id to create the new Marketplace subscription for Resubscribe
  [PublisherId <String>]: Publisher Id of the NewRelic offer that needs to be resubscribed
  [ResourceGroup <String>]: Newly selected Azure resource group in which the new Marketplace subscription will be created for Resubscribe
  [SubscriptionId <String>]: Newly selected Azure Subscription Id in which the new Marketplace subscription will be created for Resubscribe
  [TermId <String>]: Newly selected term Id to create the new Marketplace subscription for Resubscribe

INPUTOBJECT <INewRelicIdentity>: Identity Parameter
  [ConfigurationName <String>]: The configuration name. Only 'default' value is supported.
  [Id <String>]: Resource identity path
  [MonitorName <String>]: Name of the Monitors resource
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [RuleSetName <String>]: Name of the TagRule
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.newrelic/invoke-aznewrelicresubscribemonitor
#>
function Invoke-AzNewRelicResubscribeMonitor {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicMonitorResource])]
[CmdletBinding(DefaultParameterSetName='ResubscribeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Resubscribe', Mandatory)]
    [Parameter(ParameterSetName='ResubscribeExpanded', Mandatory)]
    [Parameter(ParameterSetName='ResubscribeViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ResubscribeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [System.String]
    # Monitor resource name
    ${MonitorName},

    [Parameter(ParameterSetName='Resubscribe', Mandatory)]
    [Parameter(ParameterSetName='ResubscribeExpanded', Mandatory)]
    [Parameter(ParameterSetName='ResubscribeViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ResubscribeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Resubscribe')]
    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaJsonFilePath')]
    [Parameter(ParameterSetName='ResubscribeViaJsonString')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='ResubscribeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.INewRelicIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='Resubscribe', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ResubscribeViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IResubscribeProperties]
    # Resubscribe Properties
    ${Body},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Offer Id of the NewRelic offer that needs to be resubscribed
    ${OfferId},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Organization Id of the NewRelic Organization that needs to be resubscribed
    ${OrganizationId},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Newly selected plan Id to create the new Marketplace subscription for Resubscribe
    ${PlanId},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Publisher Id of the NewRelic offer that needs to be resubscribed
    ${PublisherId},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Newly selected Azure resource group in which the new Marketplace subscription will be created for Resubscribe
    ${ResourceGroup},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Newly selected Azure Subscription Id in which the new Marketplace subscription will be created for Resubscribe
    ${SubscriptionId1},

    [Parameter(ParameterSetName='ResubscribeExpanded')]
    [Parameter(ParameterSetName='ResubscribeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Newly selected term Id to create the new Marketplace subscription for Resubscribe
    ${TermId},

    [Parameter(ParameterSetName='ResubscribeViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Resubscribe operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='ResubscribeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Body')]
    [System.String]
    # Json string supplied to the Resubscribe operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Resubscribe = 'Az.NewRelic.private\Invoke-AzNewRelicResubscribeMonitor_Resubscribe';
            ResubscribeExpanded = 'Az.NewRelic.private\Invoke-AzNewRelicResubscribeMonitor_ResubscribeExpanded';
            ResubscribeViaIdentity = 'Az.NewRelic.private\Invoke-AzNewRelicResubscribeMonitor_ResubscribeViaIdentity';
            ResubscribeViaIdentityExpanded = 'Az.NewRelic.private\Invoke-AzNewRelicResubscribeMonitor_ResubscribeViaIdentityExpanded';
            ResubscribeViaJsonFilePath = 'Az.NewRelic.private\Invoke-AzNewRelicResubscribeMonitor_ResubscribeViaJsonFilePath';
            ResubscribeViaJsonString = 'Az.NewRelic.private\Invoke-AzNewRelicResubscribeMonitor_ResubscribeViaJsonString';
        }
        if (('Resubscribe', 'ResubscribeExpanded', 'ResubscribeViaIdentityExpanded', 'ResubscribeViaJsonFilePath', 'ResubscribeViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
